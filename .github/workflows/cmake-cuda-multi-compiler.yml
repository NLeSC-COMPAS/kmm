# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CUDA build and benchmark

on:
  push:
    branches: [ 
      # "dev"
      "ubicloud"
     ]
  # pull_request:
  #   branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest # Or any other suitable runner for building

    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug] # Keep matrix for build types if needed
        cpp_compiler: [g++, 
        # clang++
        ]

    steps:
      - uses: Jimver/cuda-toolkit@v0.2.22
        id: cuda-toolkit
        with:
          method: 'network'
          sub-packages: '["toolkit"]'
      # - name: Install cmake and clang
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y cmake clang
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
          -DSPDLOG_FMT_EXTERNAL:BOOL=ON
          -DKMM_USE_CUDA:BOOL=ON
          -DKMM_BUILD_TESTS:BOOL=ON
          -DKMM_BUILD_EXAMPLES:BOOL=ON
          -DKMM_BUILD_BENCHMARKS:BOOL=ON
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- -j 6

      - name: Upload benchmark artifact
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-executable-${{ matrix.cpp_compiler }}-${{ matrix.build_type }}
          path: ${{ steps.strings.outputs.build-output-dir }}/benchmarks/vector_add_bench

  run_benchmark:
    needs: build # Ensures build job completes first
    runs-on: ubicloud-gpu

    strategy:
      fail-fast: false
      matrix:
        # This matrix should ideally match the one in the build job
        # or be a subset if you only want to run benchmarks for specific builds.
        build_type: [Debug]
        cpp_compiler: [g++, 
        #clang++
        ]

    steps:
      - name: Download benchmark artifact
        uses: actions/download-artifact@v4
        with:
          name: benchmark-executable-${{ matrix.cpp_compiler }}-${{ matrix.build_type }}
          path: ./benchmark_artifact # Download to a specific directory

      - name: Make benchmark executable
        run: chmod +x ./benchmark_artifact/vector_add_bench

      - name: Run benchmark
        run: ./benchmark_artifact/vector_add_bench 256 8 1000000000
